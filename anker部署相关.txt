jenkis地址：在本机dns文件配置：http://myci.eufylife.com/  172.16.20.95:80
jenkins账号密码
hill.gou
hill.gou

ops账号密码
hill.gou
hill.gou

跳板机地址： https://jumpserver-se.eufylife.com/core/auth/login/ 需要向运维申请权限
运维联系人：walker zeng / leon luo
账号：hill.gou
登录密码：Gouxiwen123.

查看nginx进程
ps -aux | grep nginx
运行nginx测试命令，可以看到nginx配置文件位置
nginx -t
进入配置文件目录
cd /etc/nginx/
工程配置在conf.d目录，进入查看
cd conf.d
重启ng
nginx -s reload

打包脚本：
#!/bin/sh
set -o errexit  // 若指令传回值不等于0，则立即退出shell等价于set -e

# 缺省值设置
appname=${appname:=eufysecurity}

NAMESPACE="${appname}-${package}-web-${DEPLOY_ENV}"

echo "Checking nvm"
. ~/.nvm/nvm.sh // 启动nvm
nvm --version || exit 1;

WORKSPACE=${WORKSPACE:=.}

#nvm install 14.15.3
nvm use 14.15.3
#npm install -g yarn

yarn install

yarn lerna bootstrap

# 设置 react-app 环境变量
REACT_APP_ENV=${DEPLOY_ENV} \
REACT_APP_NAME=${appname} \
yarn build --scope=${package} --stream

# package 相对路径
pkg_pathname=$(yarn -s lerna ls -al --scope=$package --loglevel error | awk '{print $3}')
// -s --silent skip Yarn console logs, other types of logs (script output) will be printed
// --stream 交叉并行输出结果，在终端打印运行日志信息
// awk是一个强大的文本分析工具，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。$0则表示所有域,$1表示第一个域,$n表示第n个域。

# 构建文件输出的目录
output_dir=$WORKSPACE/$pkg_pathname/build

output_file=$NAMESPACE.tar.gz

# 打包文件
ls $output_dir | xargs tar czf $output_file -C $output_dir
// xargs是给命令传递参数的一个过滤器，也是组合多个命令的一个工具(有些命令无法通过管道，我们使用xargs来解决这个问题)
// tar c创建一个新的归档，z归档后的文件使用gzip压缩，f指定归档文件的名称，-C来指定执行的目录
size=`ls -l $output_file | awk '{print $5}'`
if [ $size -lt 65536 ];then
  echo "压缩文件异常..." && exit 1
fi
####

echo Build success and generate file: $(cd "$(dirname $output_file)" &> /dev/null && pwd )/$output_file

// dirname命令可以取给定路径的目录部分，这里cd "$(dirname $output_file)"表示cd .
// 文件描述符，当执行shell命令时，会默认打开3个文件，每个文件有对应的文件描述符来方便我们使用，0，1，2表示标准输入、标准输出，错误输出
// > file表示标准输出重定向到file，等价于1> file
// &可以将两个输出绑定在一起，2>&1错误输出到标准输出
// &> file 或者 >& file表示错误输出和标准输出到file，等价于> file 2>&1
// /dev/null代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。执行了>/dev/null之后，标准输出就会不再存在，没有任何地方能够找到输出的内容。
// 所以&> /dev/null表示不输出任何东西到屏幕（控制台）
// pwd表示当前工作目录
// 上面这句执行的结果就是执行cd .并且输出Build success and generate file:当前工作目录/$output_file
// 如：Build success and generate file: /data/jenkins/workspace/security-vsaas-web-qa-deploy/eufysecurity-vsaas-web-qa.tar.gz

部署：
NAMESPACE="${appname}-${package}-web-${DEPLOY_ENV}"
NAMESPACE=${1:-$NAMESPACE}

scp -o StrictHostKeyChecking=no -P $PORT -i $PEM $NAMESPACE.tar.gz centos@$HOST:/opt/zip
ssh -p $PORT -i $PEM -t centos@$HOST <<EOF
  cd /opt/zip
  if [ -f "$NAMESPACE.tar.gz" ];then
    rm -rf /opt/$NAMESPACE
    mkdir -p /opt/$NAMESPACE
    tar zxvf $NAMESPACE.tar.gz -C /opt/$NAMESPACE && rm -fr $NAMESPACE.tar.gz
    echo "Uploaded to \"/opt/$NAMESPACE\" ."
  else
    echo "no $NAMESPACE.tar.gz file" && exit 0
  fi
EOF

// StrictHostKeyChecking=no第一次连接服务器时，自动接受新的公钥
// 当shell遇到<<时，它知道下一个词是一个分界符。在该分界符以后的内容都被当作子命令或子Shell的输入，直到shell又看到该分界符(位于单独的一行)。
此分界符可以是所定义的任何字符串，其实，不一定要用EOF，只要是“内容段”中没有出现的字符串，都可以用来替代EOF，完全可以换成abcde之类的字符串，只是一个起始和结束的标志罢了
// -z或--gzip或--ungzip 通过gzip指令处理备份文件
// -x或--extract或--get 从备份文件中还原文件
// -v或--verbose 显示指令执行过程
// 
if语句的格式是 if [ command ];then
符合该条件执行的语句
elif [ command ];then
符合该条件执行的语句
else
符合该条件执行的语句
fi
// fi是if语句结束的标志

文件表达式
if [ -f  file ]    如果文件存在
if [ -d ...   ]    如果目录存在
if [ -s file  ]    如果文件存在且非空 
if [ -r file  ]    如果文件存在且可读
if [ -w file  ]    如果文件存在且可写
if [ -x file  ]    如果文件存在且可执行   
整数变量表达式
if [ int1 -eq int2 ]    如果int1等于int2   
if [ int1 -ne int2 ]    如果不等于    
if [ int1 -ge int2 ]       如果>=
if [ int1 -gt int2 ]       如果>
if [ int1 -le int2 ]       如果<=
if [ int1 -lt int2 ]       如果<
字符串变量表达式
If  [ $a = $b ]                 如果string1等于string2
                                字符串允许使用赋值号做等号
if  [ $string1 !=  $string2 ]   如果string1不等于string2       
if  [ -n $string  ]             如果string 非空(非0），返回0(true)  
if  [ -z $string  ]             如果string 为空
if  [ $sting ]                  如果string 非空，返回0 (和-n类似)  

间接扩展，${!xxx}，引用的是变量xxx的真实值，感叹号必须紧跟左括号，以引入间接作用。

函数
定义：
function_name ()
{
    statement1
    statement2
    ....
    statementn
}
或
function function_name()
{
   statement1
   statement2
   ....
   statementn
}
传参：
function_name params1 params2
接收参数：
function function_name()
{
echo 'params1' $1
echo 'params2' $2
echo '所有参数' $* // 是一个集合，可以用for循环遍历
}

for循环：
for i in $*;do
echo i 
done // 循环结束

docker images | grep none | grep -v "grep" | wc -l
先过行包含none的镜像，再除去行包含grep的进程，然后统计行数
Wc，word count，用来统计行数，字符数，字节数的命令

docker build --progress plain \
    --build-arg DEPLOY_ENV=$DEPLOY_ENV \
    --build-arg REGION=$REGION \
    -t ci.goroav.com:5000/$1:$2-$3-$4 --network host -f ./Dockerfile .
--progress 设置构建过程输出类型，有三种值，auto，plain，tty，使用 plain 显示容器输出
--build-arg 设置构建时变量，在dockerfile中使用ARG 引入，使用一次引入一次
-t，--tag 名称和可选的标签，格式是名称:标签，名称可以包含远程地址，[远程ip:端口/自定义路径/*]:[版本号]
--network 在构建期间为 RUN 指令设置网络模式，默认为default
Docker的4种网络模式
host：与宿主机共用一个network namespace
container：指定的容器使用同一个network namespace
none：需要手动配置
bridge：创建一个网桥，这也是默认模式
https://www.cnblogs.com/wxwgk/p/15182541.html

docker image inspect ci.goroav.com:5000/$1:$2-$3-$4 --format='{{.Size}}'
docker image inspect 是docker image的子级命令，查看镜像详细信息，参数--format , -f，使用给定的 Go 模板格式化输出。
上面的命令表示输出镜像的大小
Go模版
Go语言的模板通过{{}}来包含需要在渲染时被替换的字段，{{.}}表示当前的对象，这和Java或者C++中的this类似，如果要访问当前对象的字段通过{{.FieldName}},但是需要注意一点：这个字段必须是导出的(字段首字母必须是大写的),否则在渲染的时候就会报错

数组
${#array[*]} 数组长度
${array[@]} 数组所有元素

参数
args=($@)
fn=$1
fn_args=${args[@]:1}
$@表示所有参数，是个数组
$1表示第一个参数
${var:num}，shell在var中提取第num个字符到末尾的所有字符

# 设置环境变量
REACT_APP_ENV=${DEPLOY_ENV} \
REACT_APP_NAME=${appname} \
yarn build --scope=${package} --stream
等价于
REACT_APP_ENV=${DEPLOY_ENV} REACT_APP_NAME=${appname} yarn build --scope=${package} --stream

在.env中设置了同名的环境变量时命令行的覆盖.env的

React中环境变量需以REACT_APP_开头
Gatsby中环境变量需以GATSBY_开头
