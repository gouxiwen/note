原生模块是指以node为后缀名的模块，这些模块由c++编写，编译成二进制文件供nodejs程序调用。
原生模块的本质是一个动态链接库，如：当一个 Node.js 的 C++ 模块在 OSX 下编译会得到一个后缀是 *.node 本质上是 *.dylib 的动态链接库；而在 Windows 下则会得到一个后缀是 *.node 本质上是 *.dll 的动态链接库。
原生模块可以理解成是node的插件或者扩展。
node内置模块也是原生模块

【编写】
1.编写binding.gyp文件
{
    "targets": [
        {
            "target_name": "hello", # 表示编译的结果是 hello.node
            "sources": [ # 表示要编译的源码
                "hello.cc"
            ]
        }
    ]
}
2.编写一段c++代码
#include <node.h>

namespace __v8_hello__{
using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
using v8::Object;
using v8::String;
using v8::Value;

// Hello方法的实现，该方法返回hello-world
void Hello(const FunctionCallbackInfo<Value>& args) {
    Isolate* isolate = args.GetIsolate();
    // Set方法用于设置返回值
    args.GetReturnValue().Set(String::NewFromUtf8(isolate, "hello-world").ToLocalChecked());
}

void init(Local<Object> exports) {
    // 在exports对象挂上hello属性，其值为Hello函数
    // NODE_SET_METHOD是一个宏，用于设置方法模板，它是node.h提供
    NODE_SET_METHOD(exports, "hello", Hello);
}

NODE_MODULE(addon, init)
}

【编译】
1.安装node-gyp
npm install -g node-gyp

2.准备系统环境
unix	
	1、Python v3.7, v3.8, v3.9, or v3.10
	2、make构建工具
	3、C++编译工具（如GCC）
macOS	
	1、Python v3.7, v3.8, v3.9, or v3.10
	2、Xcode开发工具，Xcode包含了各种构建需要的工具，安装完Xcode后安装Command Line Tools命令行工具（包含了clang和make）
Windows
	1、安装Visual C++构建环境：Visual C++ build tools 或 Desktop development with C++
	2、npm config set msvs_version 2017
3.node-gyp命令
（1）安装nodejs头文件，原生模块需要的，如node.h
node-gyp install
（2）生成配置文件
node-gyp configure
（3）构建模块
node-gyp build
其他命令 clear rebuild
参考：https://zhuanlan.zhihu.com/p/584943566?utm_id=0

