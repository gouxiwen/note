搜索镜像：docker search '镜像名'
载入镜像：docker pull '镜像名'
提交更新后的镜像：docker commit -m '提交的描述信息' -a '作者' '容器id' '新镜像名'
上传镜像：docker push '镜像名' （要先注册Docker Hub账号）
保存镜像：docker save '镜像名' 镜像名.tar
查看本机镜像:docker images
移除镜像：docker rmi '镜像名:tag'
基于镜像运行一个容器：docker run -d -P image(如：training/webapp) '镜像的命令cmd'
P自动映射端口号到本机 -p port（本机）:port设置不一样的端口
查看本机正在运行的容器:docker ps
查看本机所有的容器:docker ps -a
查看Docker容器的底层信息：docker inspect '容器名/id'
停止容器：docker stop '容器名/id'
重启容器：docker start '容器名/id'
移除容器：docker rm '容器名/id'
运行容器并且在容器内进行交互：docker run -i -t '镜像名'
进入容器 ：docker exec -it 容器ID /bin/bash
退出所在容器：exit/ctrl+d
启动容器数据库并挂载到本地路径：docker run -p 27017:27017 -v /Users/gouxiwen/Desktop/db:/data/db -td mongo
基于dockerfile构建镜像：docker build -t myimage .

docker数据持久化：
docker run .... -v /data
docker volume create --name **
以上两种指令都可以帮助你创建一个Volume，其实是在host machine上创建一个directory。和Linux不同，在mac上用docker会在mac上启动一个虚拟机运行docker，因此volume创建的directory并不在你的machine上，而是在虚拟机中。
由用户自己指定的容器外部的volume存储位置，即 docker run -v /tmp/local/:/data 这种方式,则在用户的machine的/tmp/local目录。
查看当前所有的volume：docker volume ls
获取这个volume在docker虚拟机中的位置：docker volume inspect [volume name]
进入docker虚拟机查看：1.screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty 2. entey
3.cd /var/lib/docker/volumes/

总结：
数据持久化分两种：
1.数据卷：在本机（macOS中是虚拟机）中创建一个目录挂载到容器内
	1）直接创建目录docker volume create --name ** 没什么用
	2）运行容器时将容器中的数据目录映射到本机目录 docker run ... -v [本机目录]:[容器内目录] (新命令可以使用-mount 代替 -v）
2.数据卷容器：运行一个专门的容器存放数据，其他容器使用 --volumes-from 挂载 docker run ... -v

docker端口映射与容器互联：
1.将端口映射到宿主机：有三种类型
2.使用--link互联两个容器
多个容器可以链接到同一个容器上
