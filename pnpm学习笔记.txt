pnpm,performant npm ，意味“高性能的 npm”。
由npm/yarn衍生而来，解决了npm/yarn内部潜在的bug，极大的优化了性能，扩展了使用场景。被誉为“最先进的包管理工具”

熟悉几个操作系统的概念
文件的本质
文件是一个指针，指向磁盘或者外部储存或者网络中的地址。

复制
复制一个新指针同事复制指针所指的内容，将新指针指向新内容

硬链接
复制一个新指针，指向同一个内容

软链接（也叫符号链接）
复制一个指针，指向原指针

pnpm采用硬链接和软连接结合的方式管理包，下载的依赖会缓存到磁盘下，多个项目可以共享，大大节省了磁盘空间
参考文章：https://juejin.cn/post/6916101419703468045

pnpm安装和npm的区别

pnpm安装的依赖版本号不会获取最新版本

常见问题：
幻影依赖问题，即依赖中的依赖
幻影依赖被项目工程中引用时会找不到，原因是pnpm创建node_nodules不会平铺依赖，会在依赖下再创建node_nodules来存储它的依赖，
而项目工程中查找模块只能从项目根目录开始写向上查找，因此会找不到
解决方法是安装提升，即将依赖都提升到根目录的node_modules中
1. 利用配置文件.npmrc
shamefully-hoist = true
然后执行安装
2. 命令行参数
pnpm i --shamefully-hoist


pnpm monorepo
以vue3项目工程为例说明
pnpm-workspace.yaml是其配置文件
packages:
  - 'packages/*'
  - 'packages-private/*'

catalog:
  '@babel/parser': ^7.25.3
  '@babel/types': ^7.25.2
  'estree-walker': ^2.0.2
  'magic-string': ^0.30.11
  'source-map-js': ^1.2.0
  'vite': ^5.4.0
  '@vitejs/plugin-vue': ^5.1.2

packages定义子包目录
catalog定义某些依赖的版本号

子包名称在子包的package.json中定义
"name": "@vue/shared",
子包引用默认是引用子包根目录下的index.ts文件
如：vue子包中
package.json中配置
"dependencies": {
    "@vue/shared": "workspace:*",
    "@vue/compiler-dom": "workspace:*",
    "@vue/runtime-dom": "workspace:*",
    "@vue/compiler-sfc": "workspace:*",
    "@vue/server-renderer": "workspace:*"
  },
当引用的工具包被npm publish后workspace:*会被替换成对应的真实版本号
页面导入
import { extend } from '@vue/shared' 
应该引用的是'root/packages/share/index.ts'中的内容
但是如果设置了ts.config中的compilerOptions.path则会改变默认行为，如：
"paths": {
      "@vue/compat": ["packages/vue-compat/src"],
      "@vue/*": ["packages/*/src"],
      "vue": ["packages/vue/src"]
    },
就会引用'root/packages/share/src/index.ts'中的内容

使用esbuild打包时，ts文件转换默认也会读取ts.config文件

本地包引用的逻辑说明
如果某个应用中的依赖中添加了本地包，那么安装的时候会依然从npm安装一份到本地，
引用的的时候优先从本地workspace下查找同名的包下的src/index，需要先在ts.config中配置paths（新版本好像不配置默认就是src/index）,找不到则继续在node_modules下查找