vue diff算法（算法时间复杂度O(n))：
diff算法的前提条件：新旧两个节点都不是文本节点且都有子节点，对新旧两个节点的子节点进行diff
先定义四个指针然后进行比较，比较命中就移动指针
let oldStartIdx = 0
let newStartIdx = 0
let oldEndIdx = oldCh.length - 1
let newEndIdx = newCh.length - 1
1.简单比较
old new
首首比较
尾尾比较
首位比较
尾首比较
每次命中（元素相同）时移动指针
2.索引比较（设置了key的前提下，如果没有设置key则直接删除旧首尾指针之间的dom，插入新首尾指针之间的dom）
每次遍历的过程中可能存在“新数组节点新增/旧数组节点删除”，那么前后对比就满足不了条件。这里逻辑会进入索引比较：
2.1创建旧数组索引表（旧首尾指针之间）
2.2用新首指针所指元素的key在索引表中查找节点
2.3如果没找到，新建dom
2.4如果找到分两种情况：1.sel相同，执行移动dom，2.sel不同，新建dom
2.5处理完继续移动指针
3.剩余部分批量处理
结束条件：新首指针移动到了新尾指针后面或者旧首指针移动到了旧尾指针后面
旧数组中剩下未处理的节点删除
新数组中剩下未处理的节点根据指针位置新建dom插入

以上对dom的操作都是用先标记下，diff完一次性操作

Vue3中增加了对节点的静态类型标记，如果是静态类型节点不进行diff，直接修改新节点的引用（对应的dom）

key的作用
在diff算法中有个很重要的比较函数是sameVnode，主要是比较key和sel是否相同，其中sel等于元素tagName+元素id+元素class。
由于diff算法的原则是最大可能的复用节点，所以如果没有key则会复用sel相同的节点，这会引起一些问题，比如切换元素时显示隐藏过渡动画没法执行，不能完整滴触发组件的生命周期钩子。

for循环中使用index作为key的弊端
1.影响性能
如果循环的是组件，则如果数组顺序调整会引起相同的key对应不同的props导致组件更新
2.渲染错误
如果渲染内容和props没有关联(输入类元素，如input），则数组调整顺序、删除和头部添加数据会导致页面渲染异常