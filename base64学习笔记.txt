Base64的编码原理
Base64编码的基本原理是将3个字节（24位）的二进制数据转换为4个可打印的ASCII字符。具体步骤如下：

·基本编码步骤
分组：将输入数据每3个字节分为一组（24位）。
拆分：将这24位拆分为4个6位的块。
索引：使用每个6位块作为索引，查找Base64字符表。
填充：如果最后一组不足3个字节，则使用填充字符"="补齐。

让我们通过一个详细的例子来理解这个过程：
假设我们要编码字符串"Man"：

首先将"Man"转换为ASCII码：

'M’的ASCII码是77，二进制为01001101
'a’的ASCII码是97，二进制为01100001
'n’的ASCII码是110，二进制为01101110
将这些二进制数据连接起来：
01001101 01100001 01101110

将24位拆分为4个6位的块：
010011 010110 000101 101110

将每个6位块转换为十进制：

010011 = 19
010110 = 22
000101 = 5
101110 = 46
使用这些数字作为索引，查找Base64字符表（0-63）：

19 对应字符 ‘T’
22 对应字符 ‘W’
5 对应字符 ‘F’
46 对应字符 ‘u’
最终编码结果为：TWFu

可以看到base64只能处理ASCII码编码的字符，也就是说，根据设计，Base64 仅将二进制数据作为其输入。而在 JavaScript 字符串中，这意味着每个字符只能使用一个字节表示（ASCII码编码的字符）。所以，如果你将一个字符串传递给 btoa()，而其中包含了需要使用超过一个字节才能表示的字符，你就会得到一个错误，因为这个字符串不能被看作是二进制数据。JavaScript中的btoa和atob中的b代表的就是二进制字符串，所有它们不能处理中文以及一些特殊符号等非ASCII码字符

如何编码中文？
 1.原生实现
遇到中文编码需要先做一次 URI 组件编码或对解码后的内容进行 URI 解码

const Base64 = {
    encode(str) {
        // 首先，我们使用 encodeURIComponent 来获得百分比编码的UTF-8，然后我们将百分比编码转换为原始字节，最后存储到btoa里面
        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
            function toSolidBytes(match, p1) {
                return String.fromCharCode(Number('0x' + p1));
            }));
    },
    decode(str) {
        // 过程：从字节流到百分比编码，再到原始字符串
        return decodeURIComponent(atob(str).split('').map(function (c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
    }
}
let encoded = Base64.encode("一颗不甘坠落的流星"); 	// "5LiA6aKX5LiN55SY5Z2g6JC955qE5rWB5pif"
let decoded = Base64.decode(encoded); 				// "一颗不甘坠落的流星"

2. 使用js-base64插件


应用
1.直接表示二进制数据（保存，传输），如图像、文件、加密密钥等
2.编码字符串（特殊字符，URL，避免直接暴漏）
