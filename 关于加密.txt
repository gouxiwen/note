1.ECDHE (Elliptic-Curve Diffie–Hellman key Exchange) 椭圆曲线迪菲-赫尔曼秘钥交换算法是一种秘钥交换算法
是一种不安全的通信场景下进行AES密钥协商的算法，该算法的双方通过相互各自的公钥就可以派生出相同的加密密钥。
流程：
1.双方分别生成公私钥，需要使用相同的椭圆曲线（P-256，P-384，P-521）
2.交换公钥
3.加密方利用自己的私钥和对方的公钥派生出aes加密的key，然后aes加密
4.解密方利用自己的私钥和对方的公钥派生出aes加密的key，然后aes解密
传输过程中即使中间人获得公钥也无法得到aes的key
TLS加密中约定对称加密私钥也使用了秘钥交换算法
eg：https://github.com/mdn/dom-examples/blob/master/web-crypto/derive-key/ecdh.js

2.window.crypto.subtle.exportKey可以导出四种格式的key
分别是raw、pkcs8、spki、jwk
支持情况：
raw： AES or HMAC secret keys, or Elliptic Curve public keys. 导出内容是包含了所有原始字节的buffer
Pkcs8: RSA or Elliptic Curve private keys. // 导出内容是DER规则编码的私钥的buffer，DER 是一组将 ASN.1 结构编码为二进制形式的规则。
spki：RSA or Elliptic Curve public key // 和pkcs8一样，使用DER规则编码公钥
Pkcs8和spki可以转换为PEM格式的数据
转换方法是：
将buffer转为string，再将string转为base64格式，然后加上头部和尾部，如下形式：

-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3j+HgSHUnc7F6XzvEbD0
r3M5JNy+/kabiJVu8IU1ERAl3Osi38VgiMzjDBDOrFxVzNNzl+SXAHwXIV5BHiXL
CQ6qhwYsDgH6OqgKIwiALra/wNH4UHxj1Or/iyAkjHRR/kGhUtjyVCjzvaQaDpJW
2G+syd1ui0B6kJov2CRUWiPwpff8hBfVWv8q9Yc2yD5hCnykVL0iAiyn+SDAk/rv
8dC5eIlzCI4efUCbyG4c9O88Qz7bS14DxSfaPTy8P/TWoihVVjLaDF743LgM/JLq
CDPUBUA3HLsZUhKm3BbSkd7Q9Ngkjv3+yByo4/fL+fkYRa8j9Ypa2N0Iw53LFb3B
gQIDAQAB
-----END PUBLIC KEY-----

jwk：RSA or Elliptic Curve public or private keys, as well as AES and HMAC secret keys // 导出内容是json对象

3.加密和签名
根据公开密钥密码体系，我们有了非对称加密。常见的非对称加密是 RSA 加密。

如果用「公钥」对数据加密，用「私钥」去解密，这是「加密」； 反之用「私钥」对数据加密，用「公钥」去解密，这是「签名」。

简单地看，似乎没有区别，只是换了个名字。但实际上，两者的用途完全不一样。 由于所有人都持有公钥，所以「签名」并不能保证数据的安全性，因为所有人都可以用公钥去解密。 但「签名」却能用于保证消息的准确性和不可否认性。因为公钥和私钥是一一对应的，所以当一个公钥能解密某个密文时，说明这个密文一定来自于私钥持有者。